---
import { parse } from 'node:url';
interface Props {
  name: string;
  url: string;
  tags: string[];
}

const { name, url, tags } = Astro.props;
const { hostname } = parse(url);
const faviconUrl = `https://www.google.com/s2/favicons?domain=${hostname}&sz=128`;
const defaultImageUrl = "/logo.png";
---

<a href={url} target="_blank" rel="noopener noreferrer" class="resource-card group block p-6 bg-white rounded-xl border border-gray-200 shadow-sm transition-all duration-300 ease-in-out transform hover:scale-105 hover:shadow-lg hover:rotate-1 relative overflow-hidden">
  <div class="overflow-hidden relative z-10">
    <div class="flex items-center mb-2">
      <h2 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors duration-300">{name}</h2>
    </div>
    <p class="text-blue-600 mb-4 truncate group-hover:underline">{url}</p>
    <div class="flex flex-wrap gap-2">
      {tags.map((tag) => (
        <span class="px-2 py-1 bg-gray-100 rounded-full text-sm text-gray-700 transition-all duration-300 group-hover:bg-gray-200 group-hover:text-gray-900">
          {tag}
        </span>
      ))}
    </div>
  </div>
  <div class="absolute -right-8 -top-8 w-32 h-32 opacity-10 group-hover:opacity-20 transition-opacity duration-300">
    <img 
      src={faviconUrl} 
      alt={`${name} favicon`} 
      class="w-full h-full object-contain rounded-xl" 
      onError={(e) => {
        e.currentTarget.onerror = null; 
        e.currentTarget.src = defaultImageUrl;
      }}
    />
  </div>
</a>

<style>
  .resource-card {
    position: relative;
    overflow: hidden;
  }

  .resource-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, rgba(255,255,255,0.1), rgba(255,255,255,0.5));
    transform: translateY(100%);
    transition: transform 0.6s cubic-bezier(0.165, 0.84, 0.44, 1);
    pointer-events: none;
  }

  .resource-card:hover::before {
    transform: translateY(0);
  }
</style>

<script>
  // Este script se ejecutará en el cliente para manejar errores de carga de imagen
  document.addEventListener('astro:page-load', () => {
    const images = document.querySelectorAll('.resource-card img');
    images.forEach(img => {
      img.onerror = function() {
        this.onerror = null;
        this.src = '/path/to/default-image.png'; // Asegúrate de reemplazar esto con la ruta a tu imagen por defecto
      };
    });
  });
</script>